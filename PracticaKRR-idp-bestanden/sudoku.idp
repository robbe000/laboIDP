/* 
 * sudoku.idp
 *
 */

vocabulary V {
    type Getal isa int
    type Rij isa int
    type Kolom isa int
    
    Gegeven(Rij, Kolom, Getal)
    Oplossing(Rij, Kolom) : Getal
    Vierkant(Rij, Kolom, Rij, Kolom)
} 

structure S : V {
    Getal = {1..9}
    Rij = {1..9}
    Kolom = {1..9}
    
    Gegeven = {
        1,2,2; 1,4,3; 
        2,1,7; 2,2,1; 2,6,9; 2,7,3 ;
        3,2,3; 3,3,4; 3,4,5; 3,8,7 ;
        4,1,9; 4,4,6; 
        5,2,4; 5,8,6;
        6,6,4; 6,9,9; 
        7,2,8; 7,6,6; 7,7,7; 7,8,4; 
        8,3,3; 8,4,4; 8,8,5; 8,9,8;
        9,6,1; 9,8,9
    }
}

theory T : V {
    //In het vierkant + Hetzelfde vakje mag uiteraard wel
    !Rij Kolom Rij1 Kolom1: Vierkant(Rij, Kolom, Rij1, Kolom1) <=> ((Rij-1)%3)-(Rij-1) = ((Rij1-1)%3)-(Rij1-1) & ((Kolom-1)%3)-(Kolom-1) = ((Kolom1-1)%3)-(Kolom1-1) & Rij ~= Rij1 & Kolom ~= Kolom1.
    
    //Gegeven -> Oplossing
    !Rij Kolom Getal: Gegeven(Rij, Kolom, Getal) => Getal = Oplossing(Rij, Kolom).
    
    //Niet dezelfde waarde in elk vierkant
    !Rij Kolom Rij1 Kolom1: Vierkant(Rij, Kolom, Rij1, Kolom1) => Oplossing(Rij, Kolom) ~= Oplossing(Rij1, Kolom1).
    
    //Niet dezelfde waarde in elke rij
    !Rij[Rij] Kolom[Kolom] Rij1[Rij] Kolom1[Kolom]: Oplossing(Rij, Kolom) = Oplossing(Rij1, Kolom1) & Rij ~= Rij1 => Kolom ~= Kolom1.
    
    //Niet dezelfde waarde in elke kolom
    !Rij[Rij] Kolom[Kolom] Rij1[Rij] Kolom1[Kolom]: Oplossing(Rij, Kolom) = Oplossing(Rij1, Kolom1) & Kolom ~= Kolom1 => Rij ~= Rij1.
}

procedure main() {  
    stdoptions.nbmodels = 10
    printmodels(modelexpand(T, S))  
}